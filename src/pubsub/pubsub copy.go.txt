package pubsub

import (
	"context"
	"fmt"
	"monitoring_service/logger"
	"os"
	"strconv"

	"sync"

	"github.com/gorilla/websocket"
	"github.com/redis/go-redis/v9"
)

/*
	!!!NOTE : Terdapat 2 entiti client yang terhubung ke websocket
	1. Device IoT -> mengirim data message sensor ke Redis
	2. User -> Menerima data message dari Redis melalui WebSocket



	each device can only publish to one channel at a time
	each user can only subscribe to one channel at a time

	Server Tidak Perlu Looping ke Subscribers â€“ Redis menangani distribusi pesan.
*/

// WebSocketHub menyimpan koneksi WebSocket dan integrasi Redis

type WebSocketHub struct {
	mu           sync.Mutex
	Devices      map[*websocket.Conn]*DeviceClient
	Users        map[*websocket.Conn]*UserClient
	UserConn     map[int64]*websocket.Conn
	DeviceConn   map[int64]*websocket.Conn
	ChannelUsers map[string][]*websocket.Conn // Mapping channel ke daftar koneksi user
	redis        *redis.Client
}


type DeviceClient struct {
	DeviceID         int64
	DeviceName       string
	Conn             *websocket.Conn
	ChannelToPublish string
	PubSub           *redis.PubSub
	Action  		 string
}

type UserClient struct {
	UserID            int64
	Username          string
	Role              string
	Conn              *websocket.Conn
	ChannelSubscribed string
	PubSub            *redis.PubSub
	PubSubCancel      context.CancelFunc
}

var (
	RedisClient *redis.Client
	redisMu     sync.Mutex
	wsHub       *WebSocketHub
	wsHubOnce   sync.Once
)




func GetWebSocketHub(referenceId string) (*WebSocketHub, error) {
	var newErr error

	logger.Debug(referenceId, "GetWebSocketHub - 1")
	wsHubOnce.Do(func() {
		logger.Debug(referenceId, "GetWebSocketHub - 1.2")
		wsHub, newErr = NewWebSocketHub(referenceId)
		logger.Debug(referenceId, "GetWebSocketHub - 1.3")
		if newErr != nil {
			logger.Debug(referenceId, "GetWebSocketHub - 1.4")
			wsHub = nil
			logger.Error(referenceId, fmt.Sprintf("ERROR - Failed to initialize WebSocketHub: %v", newErr))
		}
	})

	if newErr != nil {
		logger.Error(referenceId, "ERROR - WebSocketHub instance is nil after initialization")
		return nil, newErr
	}

	logger.Debug(referenceId, "GetWebSocketHub - 3")
	return wsHub, nil
}

// Inisialisasi WebSocketHub dengan Redis
func NewWebSocketHub(referenceId string) (*WebSocketHub, error) {

	logger.Debug(referenceId, "NewWebSocketHub - 1")
	redisClient := GetRedisClient()
	if redisClient == nil { // here
		return nil, fmt.Errorf("failed to initialize WebSocketHub: redis client is nil")
	}

	logger.Debug(referenceId, "NewWebSocketHub - 2")

	hub := &WebSocketHub{
		Devices:      make(map[*websocket.Conn]*DeviceClient),
		Users:        make(map[*websocket.Conn]*UserClient),
		UserConn:     make(map[int64]*websocket.Conn), // Inisialisasi map
		DeviceConn:   make(map[int64]*websocket.Conn), // Inisialisasi map
		ChannelUsers: make(map[string][]*websocket.Conn),
		redis:        redisClient,
	}

	logger.Debug(referenceId, "NewWebSocketHub - 3")

	logger.Info(referenceId, "INFO - New WebSocketHub initialized with Redis")
	return hub, nil
}

func InitRedisConn(host, pass string, db int) error {
	redisMu.Lock()
	defer redisMu.Unlock()

	if RedisClient != nil {
		return nil
	}

	client := redis.NewClient(&redis.Options{
		Addr:     host,
		Password: pass,
		DB:       db,
	})

	if _, err := client.Ping(context.Background()).Result(); err != nil {
		logger.Error("REDIS", fmt.Sprintf("ERROR - Redis connection failed: %v", err))
		client.Close()
		return err
	}

	RedisClient = client
	logger.Info("REDIS", "INFO - Successfully connected to Redis")
	return nil
}

// GetRedisClient memastikan Redis client aktif
func GetRedisClient() *redis.Client {
	redisMu.Lock()
	defer redisMu.Unlock()

	if RedisClient == nil {
		logger.Error("REDIS", "ERROR - Redis client is not initialized")

		// Inisialisasi ulang Redis,
		DHOST := os.Getenv("RDHOST")
		RDPASS := os.Getenv("RDPASS")
		RDDB, errConv := strconv.Atoi(os.Getenv("RDDB"))
		if errConv != nil {
			logger.Error("REDIS", fmt.Sprintf("ERROR - Failed to convert RDDB: %v", errConv))
			return nil
		}

		if err := InitRedisConn(DHOST, RDPASS, RDDB); err != nil {
			logger.Error("REDIS", fmt.Sprintf("ERROR - Failed to reconnect to Redis: %v", err))
			return nil
		}
	}

	if _, err := RedisClient.Ping(context.Background()).Result(); err != nil {
		logger.Error("REDIS", "ERROR - Redis connection lost. Reconnecting...")
		RedisClient.Close()
		RedisClient = nil
	}

	return RedisClient
}
