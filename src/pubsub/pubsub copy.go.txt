package pubsub

import (
	"context"
	"fmt"
	"monitoring_service/logger"
	"os"
	"strconv"
	"sync"

	"github.com/gorilla/websocket"
	"github.com/redis/go-redis/v9"
)

/*
	!!!NOTE : Terdapat 2 entiti client yang terhubung ke websocket
	1. Device IoT -> mengirim data message sensor ke Redis
	2. User -> Menerima data message dari Redis melalui WebSocket

	Server Tidak Perlu Looping ke Subscribers â€“ Redis menangani distribusi pesan.
*/

// WebSocketHub menyimpan koneksi WebSocket dan integrasi Redis
type WebSocketHub struct {
	mu      sync.Mutex
	devices map[*websocket.Conn]*DeviceClient
	users   map[*websocket.Conn]*UserClient
	redis   *redis.Client
}

// Struktur client untuk menyimpan client device
type DeviceClient struct {
	DeviceID   int64
	DeviceName string
	Conn       *websocket.Conn
}

// Struktur client untuk menyimpan client user
type UserClient struct {
	UserID   int64
	Username string
	Role     string
	Conn     *websocket.Conn
}

/*
wsHubOnce.Do memastikan bahwa NewWebSocketHub hanya dijalankan sekali selama masa hidup aplikasi.
Jika wsHub sudah ada, maka tidak perlu inisialisasi ulang.
*/
var wsHub *WebSocketHub
var wsHubOnce sync.Once

func GetWebSocketHub(referenceID string) (*WebSocketHub, error) {
	var err error
	wsHubOnce.Do(func() {
		wsHub, err = NewWebSocketHub(referenceID)
		if err != nil {
			wsHub = nil
		}
	})
	return wsHub, err
}

// Inisialisasi WebSocketHub dengan Redis
func NewWebSocketHub(referenceID string) (*WebSocketHub, error) {
	RDHOST := os.Getenv("RDHOST")
	RDPASS := os.Getenv("RDPASS")
	RDDB, err := strconv.Atoi(os.Getenv("RDDB"))
	if err != nil {
		logger.Error(referenceID, "ERROR - Invalid Redis database value:", err)
		return nil, err
	}

	logStr := fmt.Sprintf("Connecting to Redis - Host: %s, DB: %d", RDHOST, RDDB)
	logger.Info(referenceID, "INFO -", logStr)

	client := redis.NewClient(&redis.Options{
		Addr:     RDHOST,
		Password: RDPASS,
		DB:       RDDB,
	})

	if _, err := client.Ping(context.Background()).Result(); err != nil {
		logger.Error(referenceID, "ERROR - Failed to connect to Redis:", err)
		return nil, err
	}

	logger.Info(referenceID, "INFO - Connected to Redis successfully")

	hub := &WebSocketHub{
		devices: make(map[*websocket.Conn]*DeviceClient),
		users:   make(map[*websocket.Conn]*UserClient),
		redis:   client,
	}

	return hub, nil
}


func InitRedisConn(){}

// Menambahkan Device Baru
func (hub *WebSocketHub) AddDevice(referenceID string, conn *websocket.Conn, deviceID int64, deviceName string) {
	hub.mu.Lock()
	defer hub.mu.Unlock()

	hub.devices[conn] = &DeviceClient{
		DeviceID:   deviceID,
		DeviceName: deviceName,
		Conn:       conn,
	}

	logger.Info(referenceID, "INFO - NEW DEVICE Connected - ID: ", deviceID, "Name: ", deviceName)
}

// Menghapus Device
// Semua pengguna yang subscribe akan otomatis berhenti menerima pesan
func (hub *WebSocketHub) RemoveDevice(referenceID string, conn *websocket.Conn) {
	hub.mu.Lock()
	device, exists := hub.devices[conn]
	if exists {
		delete(hub.devices, conn)
	}
	hub.mu.Unlock()

	if exists {
		logger.Info(referenceID, "INFO - REMOVE DEVICE - ID: ", device.DeviceID, ", Name: ", device.DeviceName)
		conn.Close()
	}
}

// Menghapus User
// Secara otomatis unsubscribe dari semua channel Redis
func (hub *WebSocketHub) RemoveUser(referenceID string, conn *websocket.Conn) {
	hub.mu.Lock()
	user, exists := hub.users[conn]
	if exists {
		delete(hub.users, conn)
	}
	hub.mu.Unlock()

	if exists {
		logger.Info(referenceID, "INFO - REMOVE USER - ID: ", user.UserID, ", Username: ", user.Username)
		conn.Close()
	}
}

// User Subscribe ke Channel Redis
// Pengguna otomatis mendapatkan data yang dikirim oleh device
func (hub *WebSocketHub) SubscribeUserToDevice(userConn *websocket.Conn, deviceID int64) {
	ctx := context.Background()
	channelName := fmt.Sprintf("device:%d", deviceID)
	sub := hub.redis.Subscribe(ctx, channelName)

	logger.Info("", "INFO - User subscribed to:", channelName)

	go func() {
		defer sub.Close() // Pastikan subscription ditutup saat fungsi selesai

		ch := sub.Channel()
		for msg := range ch {
			err := userConn.WriteMessage(websocket.TextMessage, []byte(msg.Payload))
			if err != nil {
				logger.Error("", "ERROR - Failed to send message to user: ", err)
				userConn.Close()
				return
			}
		}
	}()
}

// Device Publish ke Channel Redis
// Pesan akan otomatis dikirim ke semua subscriber
func (hub *WebSocketHub) DevicePublishToChannel(referenceID string, deviceID int64, data string) error {
	channelName := fmt.Sprintf("device:%d", deviceID)
	logger.Info(referenceID, "INFO - Publishing to channel: ", channelName)

	err := hub.redis.Publish(context.Background(), channelName, data).Err()
	if err != nil {
		logger.Error(referenceID, "ERROR - Failed to publish to Redis: ", err)
	}
	return err
}
