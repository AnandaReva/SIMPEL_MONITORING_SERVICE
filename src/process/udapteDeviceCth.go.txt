package process

import (
	"database/sql"
	"fmt"
	"monitoring_service/crypto"
	"monitoring_service/logger"
	"monitoring_service/pubsub"
	"monitoring_service/utils"
	"os"
	"strings"
	"time"

	"maps"

	"github.com/jmoiron/sqlx"
)

/*
[Komentar yang ada tetap dipertahankan...]
*/

type DevicehandlerCth struct {
	Hub *pubsub.WebSocketHub
}

// UpdateDeviceDAta handles updating device data
func UpdateDeviceDAta(referenceId string, conn *sqlx.DB, userID int64, role string, param map[string]any) utils.ResultFormat {
	startTime := time.Now()
	defer func() {
		duration := time.Since(startTime)
		logger.Debug(referenceId, "DEBUG - UpdateDeviceDAta - Execution completed in ", duration)
	}()

	// Initialize result format
	result := utils.ResultFormat{
		ErrorCode:    "000000",
		ErrorMessage: "",
		Payload:      make(map[string]any),
	}

	logger.Info(referenceId, "INFO - UpdateDeviceDAta - params: ", param)

	// Validate device_id parameter
	deviceId, ok := param["device_id"].(float64)
	if !ok || deviceId <= 0 {
		logger.Error(referenceId, "ERROR - UpdateDeviceDAta - Missing or Invalid device_id")
		result.ErrorCode = "400001"
		result.ErrorMessage = "Invalid request"
		return result
	}

	deviceIdInt := int64(deviceId)

	// Validate change_fields parameter
	changeFields, ok := param["change_fields"].(map[string]any)
	if !ok || len(changeFields) == 0 {
		logger.Error(referenceId, "ERROR - UpdateDeviceDAta - Missing or Invalid change_fields")
		result.ErrorCode = "400002"
		result.ErrorMessage = "Invalid request"
		return result
	}

	// Check if device exists
	var deviceName string
	var deviceSt int8
	queryCheck := `SELECT name, st FROM device.unit WHERE id = $1;`
	errCheck := conn.QueryRow(queryCheck, deviceIdInt).Scan(&deviceName, &deviceSt)
	if errCheck != nil {
		logger.Error(referenceId, "ERROR - UpdateDeviceDAta - Device ID not found:", deviceIdInt)
		result.ErrorCode = "400003"
		result.ErrorMessage = "Invalid request"
		return result
	}

	// Begin transaction
	tx, err := conn.Beginx()
	if err != nil {
		logger.Error(referenceId, "ERROR - UpdateDeviceDAta - Failed to start transaction:", err)
		result.ErrorCode = "500000"
		result.ErrorMessage = "Internal server error"
		return result
	}
	defer tx.Rollback()

	// Inisialisasi beforeData dan afterData sebagai variabel lokal
	beforeData := make(map[string]any)
	afterData := make(map[string]any)

	// check if password exist in change_fields
	if newDevicePassword, ok := changeFields["password"].(string); ok && newDevicePassword != "" {
		// [Kode untuk handle password tetap sama...]
		// Hanya ubah referensi ke beforeData/afterData lokal
		beforeData["password"] = oldPlainPassword
		afterData["password"] = newDevicePassword
	}

	// Update field data
	if dataField, ok := changeFields["data"].(map[string]any); ok && len(dataField) > 0 {
		// Pass beforeData dan afterData sebagai parameter
		success := updateDeviceDataFieldCth(referenceId, tx, deviceIdInt, dataField, beforeData, afterData)
		if !success {
			result.ErrorCode = "500001"
			result.ErrorMessage = "Failed to update device data field"
			return result
		}
	}

	// Proses attachment
	if rawAttachment, ok := changeFields["attachment"].(map[string]any); ok {
		// [Kode untuk handle attachment tetap sama...]
		// Pass beforeData dan afterData sebagai parameter
		if insertData, ok := rawAttachment["insert"].(map[string]any); ok {
			// [Kode insert attachment...]
		} else if updateData, ok := rawAttachment["update"].(map[string]interface{}); ok {
			success := updateDeviceAttachmentCth(referenceId, tx, sql.NullInt64{Int64: int64(attachmentIdFloat), Valid: true}, 
				attachmentData, imageName, deviceIdInt, beforeData, afterData)
			if !success {
				result.ErrorCode = "500013"
				result.ErrorMessage = "Failed to update attachment"
				return result
			}
		} else if deleteData, ok := rawAttachment["delete"].(map[string]interface{}); ok {
			// [Kode delete attachment...]
		}
	}

	// Build update query dan ambil beforeData untuk field lainnya
	updateFields := []string{}
	updateValues := []any{}
	fieldNames := []string{}

	for key, value := range changeFields {
		if key != "data" && key != "attachment" {
			updateFields = append(updateFields, fmt.Sprintf("%s = ?", key))
			updateValues = append(updateValues, value)
			fieldNames = append(fieldNames, key)
		}
	}

	if len(fieldNames) > 0 {
		// Ambil beforeData untuk field yang akan diupdate
		fieldList := strings.Join(fieldNames, ", ")
		queryToGetBeforeData := fmt.Sprintf(`SELECT %s FROM device.unit WHERE id = ?`, fieldList)

		row := make(map[string]any)
		err := tx.QueryRowx(queryToGetBeforeData, deviceId).MapScan(row)
		if err != nil {
			logger.Error(referenceId, "ERROR - Failed to fetch beforeData for updated fields:", err)
			result.ErrorCode = "500004"
			result.ErrorMessage = "Internal server error"
			return result
		}

		beforeDataFields := make(map[string]any)
		for key := range changeFields {
			if key != "data" && key != "attachment" {
				if val, exists := row[key]; exists {
					beforeDataFields[key] = val
				}
			}
		}

		if len(beforeDataFields) > 0 {
			beforeData["fields"] = beforeDataFields
		}

		// Siapkan afterData
		afterDataFields := make(map[string]any)
		for key, value := range changeFields {
			if key != "data" && key != "attachment" {
				afterDataFields[key] = value
			}
		}
		if len(afterDataFields) > 0 {
			afterData["fields"] = afterDataFields
		}
	}

	// [Kode untuk eksekusi query update tetap sama...]

	// Commit transaction
	err = tx.Commit()
	if err != nil {
		logger.Error(referenceId, "ERROR - UpdateDeviceDAta - Failed to commit transaction:", err)
		result.ErrorCode = "500004"
		result.ErrorMessage = "Internal server error"
		return result
	}

	// Simpan beforeData dan afterData ke result jika diperlukan
	result.Payload["before"] = beforeData
	result.Payload["after"] = afterData
	result.Payload["status"] = "success"

	logger.Info(referenceId, "INFO - UpdateDeviceDAta - Device data updated successfully")
	return result
}

// updateDeviceDataFieldCth dengan parameter beforeData dan afterData
func updateDeviceDataFieldCth(referenceId string, tx *sqlx.Tx, deviceId int64, dataField map[string]any, 
	beforeData, afterData map[string]any) bool {
	
	// [Implementasi fungsi tetap sama...]
	// Hanya ubah referensi ke beforeData/afterData parameter
	
	// Contoh:
	if len(originalBefore) > 0 {
		beforeData["data"] = originalBefore
	}
	if len(updatedAfter) > 0 {
		afterData["data"] = updatedAfter
	}
	
	return true
}

// updateDeviceAttachmentCth dengan parameter beforeData dan afterData
func updateDeviceAttachmentCth(referenceId string, tx *sqlx.Tx, attachmentId sql.NullInt64, 
	attachmentData string, attachmentName string, deviceId int64, 
	beforeData, afterData map[string]any) bool {
	
	// [Implementasi fungsi tetap sama...]
	// Hanya ubah referensi ke beforeData/afterData parameter
	
	// Contoh:
	if existingAttachment.Name != "" {
		beforeData["attachment"] = map[string]any{
			"name": existingAttachment.Name,
		}
	}
	
	afterData["attachment"] = map[string]any{
		"name": attachmentName,
	}
	
	return true
}